Problème de connectivité

UnionFind

Pire cas :
    - find : O(N)
    - union : O(N)

Optimisation :

1. union pondérée
    on mesure la longueur maximale des chemins, qu’on appelle le rang

                   link : [0,1,2,3] rank : [0,0,0,0]
    union (0,2)    link : [0,1,0,3] rank : [1,0,0,0]  rank =
    union (1,2)    link : [0,0,0,3] rank : [1,1,0,0]  rank =
    union (1,3)    link : [0,0,0,0] rank : [1,1,0,0]

    Propriété :
    une classe de rang k
    • a des chemins de longueur maximale k
    • possède au moins 2**k  éléments

    find et union sont en O(log(N))

    on est donc assuré de ne pas faire déborder la pile d’appel
    (StackOverflowError)

    O(N log(N))

2. Compression de chemin

     une classe de rang k
    • a des chemins de longueur au plus k
    • possède au moins 2**k éléments

    la complexité amortie de chaque opération est O(α(N)),
    où a est l’inverse de la fonction d’Ackermann [Tarjan, 1979]
    en pratique, α(N) < 5 pour toute valeur réaliste de N
    cette complexité est optimale [Fredman & Saks, 1989]

Application (Labyrinthe parfait avec le mélange de Knuth):

    static<E> void shuffle(E[] a) {
      for (int i = 1; i < a.length; i++) {
        int j = (int)(Math.random() * (i + 1)); // j dans 0..i
        swap(a, i, j);
      }
    }

Améliorations :
    • N n’est pas connu a priori ? tableau redimensionnable
    • les entiers ne sont pas consécutifs ?
    • il ne s’agit pas d’entiers ?

    class HashUnionFind<E> {
      private HashMap<E, E>       link;
      private HashMap<E, Integer> rank;
      ...Ex60 Poly